version: 0.2
env:
  variables:
    AWS_DEFAULT_REGION: "ap-south-1"  # Specify the region
    REPOSITORY_NAME: "codedevops"    # ECR repository name
    CLUSTER_NAME: "codedevops"      # Cluster name

phases:
  install:
    commands:  
      - export SONAR_SCANNER_VERSION=5.0.1.3006
      - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
      - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
      - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      - export SONAR_SCANNER_OPTS="-server"
      - sonar-scanner -Dsonar.organization=ravindrasinghh -Dsonar.projectKey=ravindrasinghh_codedevops -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io    
      - echo "Installing GitLeaks..."
      - wget https://github.com/zricethezav/gitleaks/releases/download/v8.0.0/gitleaks_8.0.0_linux_x64.tar.gz
      - tar -xzf gitleaks_8.0.0_linux_x64.tar.gz
      - mv gitleaks /usr/local/bin/gitleaks
      - chmod +x /usr/local/bin/gitleaks      
      - apt-get install wget apt-transport-https gnupg
      - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
      - echo deb https://aquasecurity.github.io/trivy-repo/deb bionic main | tee -a /etc/apt/sources.list.d/trivy.list
      - apt-get update
      - apt-get install -y trivy
      - echo "Installing Hadolint..."
      - wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64
      - chmod +x /usr/local/bin/hadolint
      - echo "Hadolint installed successfully!"
      - echo Install kubectl
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv kubectl /usr/local/bin         

      
      
  pre_build:
    commands:
      - echo Logging in to Amazon ECR.......
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION| docker login --username AWS --password-stdin 434605749312.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - # Replace with this to your repository URI
      - REPOSITORY_URI=434605749312.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY_NAME
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "Running Hadolint on Dockerfile..."
      - hadolint Dockerfile || true 
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$IMAGE_TAG"'@' k8s-deployment.yaml
      - # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config

  build:
    commands:
      - echo "Scanning repository for secrets with GitLeaks..."
      - gitleaks detect --source='.' --report-format=json --report-path=gitleaks-report.json    
      - echo "Building the Docker image..."
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest
      - echo "Scanning for vulnerabilities with Trivy..."
      - trivy image 434605749312.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY_NAME:latest || true

  post_build:
    commands:  
      - echo "Pushing the Docker image..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG    
      - echo "Deploying the application to Kubernetes..."
      - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::434605749312:role/EksCodeBuildKubectlRole --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration') 
      - aws eks update-kubeconfig --name $CLUSTER_NAME
      - kubectl apply -f k8s-deployment.yaml
      - echo "Done Enjoy the Day"
      


      
